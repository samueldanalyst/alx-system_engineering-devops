One-Server Web Infrastructure Design for www.foobar.com
üîµ Scenario
A user opens a browser and types www.foobar.com. This request triggers a series of interactions across various components hosted on a single server.
________________________________________
üñ•Ô∏è Components Used
‚Ä¢	1 Server ‚Äì with IP address 8.8.8.8
‚Ä¢	1 Web Server ‚Äì Nginx
‚Ä¢	1 Application Server ‚Äì running the application code (e.g., Python/Node.js/PHP)
‚Ä¢	1 Code Base ‚Äì the actual application files
‚Ä¢	1 Database ‚Äì MySQL
‚Ä¢	1 Domain Name ‚Äì foobar.com, with a www subdomain pointing to 8.8.8.8
________________________________________
üîÅ Flow of a User Request
1.	User enters www.foobar.com in the browser.
2.	The browser performs a DNS lookup to resolve www.foobar.com to the IP address 8.8.8.8.
3.	The request reaches the Nginx web server on the server.
4.	Nginx forwards the request to the application server (e.g., via FastCGI, WSGI, or reverse proxy).
5.	The application may query the MySQL database for data.
6.	The response is generated and passed back through Nginx.
7.	The user sees the web page in their browser.
________________________________________
üß± Component Roles
‚Ä¢	Server: A physical or virtual machine that hosts all services (web, app, DB).
‚Ä¢	Domain Name: Makes it easier to access the server using human-readable names instead of IPs.
‚Ä¢	DNS A Record: The www record is an A record, which maps www.foobar.com to IP 8.8.8.8.
‚Ä¢	Web Server (Nginx): Handles HTTP requests, serves static content, and proxies to the app server.
‚Ä¢	Application Server: Runs the logic of the application (e.g., fetching data, handling user input).
‚Ä¢	Database (MySQL): Stores and retrieves structured data for the application.
‚Ä¢	Communication: The user‚Äôs browser communicates with the server over TCP/IP using the HTTP protocol.
________________________________________
üìâ Infrastructure Limitations
1.	Single Point of Failure (SPOF)
If the server crashes, the entire website goes down.
2.	No Redundancy
No backups or replicas of web/app/db components.
3.	Downtime During Maintenance
Restarting the server (e.g., deploying new code) results in downtime.
4.	Lack of Scalability
One server cannot handle a high volume of traffic or large data loads.
________________________________________







