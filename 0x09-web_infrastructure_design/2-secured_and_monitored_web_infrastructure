üîê Three-Server Web Infrastructure for www.foobar.com (Secured + Monitored)
________________________________________
üåê Use Case
A user accesses https://www.foobar.com. The traffic is securely routed through a load balancer, passed to the web/application server, and data is retrieved from a database. All components are secured, encrypted, and monitored.
________________________________________
üß± Infrastructure Components
1.	Server 1: Load Balancer (HAProxy) + SSL Termination + Firewall + Monitoring Client
2.	Server 2: Web Server (Nginx) + Application Server + Firewall + Monitoring Client
3.	Server 3: Database Server (MySQL) + Firewall + Monitoring Client
________________________________________
üîÅ Flow of Request
1.	User requests https://www.foobar.com.
2.	DNS resolves www.foobar.com to the public IP of the load balancer.
3.	Load balancer (HAProxy) with SSL certificate terminates HTTPS, decrypts traffic.
4.	Load balancer routes traffic to Server 2 (Nginx + App).
5.	Server 2 queries Server 3 (MySQL) for data.
6.	Response is sent back to the user via the load balancer.
________________________________________
üîê Additional Elements & Justification
‚úÖ Firewalls (3 total)
‚Ä¢	Why: Block unauthorized traffic and allow only specific ports:
o	Load balancer: allow port 443 (HTTPS)
o	Web server: allow only from Load Balancer IPs
o	DB server: allow only from Web/App server IPs
‚Ä¢	Purpose: Minimize attack surface.
‚úÖ SSL Certificate (on Load Balancer)
‚Ä¢	Why: Enables HTTPS for encrypted communication between the user and the server.
‚Ä¢	Purpose: Prevents man-in-the-middle attacks, ensures data integrity and privacy.
‚úÖ Monitoring Clients (3 total ‚Äì one per server)
‚Ä¢	Why: Collect metrics (CPU, memory, traffic, disk), logs, and service health.
‚Ä¢	Tool: Could be Sumo Logic, Prometheus, or Datadog.
‚Ä¢	How it collects data: Each agent runs as a daemon and sends data to a centralized monitoring service.
o	Collects system logs
o	Parses application logs
o	Exports metrics (e.g., request count, status codes)
‚úÖ QPS Monitoring (Queries Per Second)
‚Ä¢	Add instrumentation (e.g., NGINX stub_status or HAProxy stats)
‚Ä¢	Export to monitoring tool using an agent or exporter
‚Ä¢	Set alerts for spikes or drops
________________________________________
üìâ Infrastructure Limitations
‚ùå SSL Termination at Load Balancer
‚Ä¢	Issue: Traffic between load balancer and app server is unencrypted unless re-encrypted.
‚Ä¢	Mitigation: Use end-to-end encryption (TLS from LB ‚Üí Web server too).
‚ùå Single MySQL Server Accepting Writes
‚Ä¢	Issue: Single point of failure (SPOF), affects availability and write performance.
‚Ä¢	Mitigation: Use Primary-Replica with failover or MySQL Cluster.
‚ùå Servers Running All Components
‚Ä¢	Issue: Tight coupling, resource contention, difficult to scale individual components.
‚Ä¢	Mitigation: Use separation of concerns ‚Äî separate web, app, and DB on different nodes or containers.

